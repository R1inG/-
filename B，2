#include<stdio.h>
#include<string.h> 
#include<stdlib.h>
#define MAX 100
#define INF 65535
typedef struct Edge
{
    int source, destination, weight; // 起点，终点，权重 
} Edge;

typedef struct Graph
{
    int v, e; // v是顶点数，e是边数 
    Edge edge[MAX]; // 保存边的信息 
} Graph;

Graph* createGraph(int v, int e) 
{
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->e = e;
    graph->v = v;
    return graph;
}

void bellmanFord(Graph* graph, int s)
{
    int u, d, w, i, j;
    int v = graph->v;
    int e = graph->e;
    int dist[v];
    
    for (int i = 1; i <= v; i++)
        dist[i] = INF;
    dist[s] = 0;
    
    for (i = 1; i <= v-1; i++)
    {
        for (j = 1; j <= e; j++)
        {
            u = graph->edge[j].source;
            d = graph->edge[j].destination;
            w = graph->edge[j].weight;
            if (dist[u] != INF && dist[u] + w < dist[d])
            {
                dist[d] = dist[u] + w;
            }
        }
    }

    for (i = 1; i <= e; i++)
    {
        u = graph->edge[i].source;
        d = graph->edge[i].destination;
        w = graph->edge[i].weight;
        if (dist[u] + w < dist[d]) 
        {
            printf("Graph contains negative weight cycle\n");
            return;
        }
    }
	printf("\n");
    for (int i = 1; i <= v; i++) 
    {
    	if(dist[i]==INF)
    		printf("%d\t\t%s\n",i,"INF");
    	else
        	printf("%d\t\t%d\n", i, dist[i]);
    }
}
int main(void)
{
    int e, v, i, s; // e 边数  v 顶点数  s  源点 
    Graph *graph;
    scanf("%d %d", &v, &e);
    graph = createGraph(v, e);
    
    for (i = 1; i <= e; i++)
    {
        scanf("%d%d%d", &graph->edge[i].source, &graph->edge[i].destination, &graph->edge[i].weight);
    }
    
    scanf("%d", &s);
    bellmanFord(graph, s);
    return 0;
}
