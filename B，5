#include <stdio.h>
#include <stdlib.h>
#define MAX 100
// 二叉树节点结构
typedef struct TreeNode 
{
    int value;
    struct TreeNode* left;
    struct TreeNode* right;
} TreeNode;

// 栈结构
typedef struct StackNode 
{
    struct TreeNode* data;
    struct StackNode* next;
} StackNode;

typedef struct Stack
{
	struct StackNode *top;
}Stack;

void initStack(Stack *stack)
{
	stack->top = NULL;
}
TreeNode* creatTree(int node[][3],TreeNode *tree,int n)
{
	int i;
	tree=(TreeNode*)malloc(sizeof(TreeNode)*(n+1));
	for(i=1;i<=n;i++)
	{
		tree[i].value = node[i][0];
		tree[i].left = NULL;
		tree[i].right = NULL;
	}
	for(i=1;i<=n;i++)
	{
		if(node[i][1] != -1)
			tree[i].left = &tree[node[i][1]];
		if(node[i][2] != -1)
			tree[i].right = &tree[node[i][2]];
	}
	return &tree[1];
}
void push(Stack *stack,TreeNode *s)
{
	StackNode *stacknode=(StackNode *)malloc(sizeof(StackNode));
	stacknode->data = s;
	stacknode->next=stack->	top;
	stack->top =stacknode;
}

TreeNode* pop(Stack *stack)
{
	if(stack->top == NULL)
		return NULL;
	StackNode *temp=stack->top ;
	TreeNode* treenode = temp->data;
	stack->top = temp->next ;
	free(temp);
	return treenode;
}

// 先序遍历
void preorderTraversal(TreeNode* root) {
    if (root == NULL) {
        return;
    }

    Stack stack;
    initStack(&stack);
    push(&stack, root);

    while (stack.top != NULL) {
        TreeNode* node = pop(&stack);
        printf("%d ", node->value);

        if (node->right != NULL) {
            push(&stack, node->right);
        }
        if (node->left != NULL) {
            push(&stack, node->left);
        }
    }
}
// 中序遍历
void inorderTraversal(TreeNode* root) {
    if (root == NULL) {
        return;
    }

    Stack stack;
    initStack(&stack);
    TreeNode* current = root;

    while (current != NULL || stack.top != NULL) {
        while (current != NULL) {
            push(&stack, current);
            current = current->left;
        }

        current = pop(&stack);
        printf("%d ", current->value);

        current = current->right;
    }
}

// 后序遍历
void postorderTraversal(TreeNode* root) {
    if (root == NULL) {
        return;
    }

    Stack stack1, stack2;
    initStack(&stack1);
    initStack(&stack2);
    push(&stack1, root);

    while (stack1.top != NULL) {
        TreeNode* node = pop(&stack1);
        push(&stack2, node);

        if (node->left != NULL) {
            push(&stack1, node->left);
        }
        if (node->right != NULL) {
            push(&stack1, node->right);
        }
    }

    while (stack2.top != NULL) {
        TreeNode* node = pop(&stack2);
        printf("%d ", node->value);
    }
}

int main(void)
{
	int n,i,node[MAX][3];
	TreeNode* tree,*root;
	scanf("%d",&n);
	for(i=1;i<=n;i++)
	{
		scanf("%d%d%d",&node[i][0],&node[i][1],&node[i][2]);
	}
	root=creatTree(node,tree,n);
	// 先序遍历
    printf("先序遍历: ");
    preorderTraversal(root);
    printf("\n");

    // 中序遍历
    printf("中序遍历: ");
    inorderTraversal(root);
    printf("\n");

    // 后序遍历
    printf("后序遍历: ");
    postorderTraversal(root);
    printf("\n");
	return 0;
}
